//
//  ScriptSetup.swift
//  CodeTemplaterr
//
//  Created by Daniel Cech on 09/09/2020.
//

import Foundation
import ScriptToolkit

class ScriptSetup {

    /// Main functionality objects
    // swiftlint:disable implicitly_unwrapped_optional
    private var templates: Templates!
    private var generator: Generator!
    private var reviewer: Reviewer!
    // swiftlint:enable implicitly_unwrapped_optional

    init() {}

    /// Initial steps for proper script configuration
    func initializeContext() throws -> Context {
        templates = Templates()
        parameterProcessor = ParameterProcessor(templates: templates)
        
        // Loading CodeTemplater.json in current folder
        
        let context = Context()
        try context.applyDefaultContext()
        try context.setupScriptPaths()
        context.updateContextWithAutogeneratedValues()
        
        // Load available templates from Templates folder
        try templates.templateTypes(context: context)

        // Parsing of default command line parameters
        try parameterProcessor.getPossibleTemplates(context: context)
        parameterProcessor.resetWithDefaultParameters()
        parameterProcessor.setupShellParameters()
        try parameterProcessor.parseShellParameters(context: context, handleUnknownParameters: false)
        
        // Show help with parameter specification if needed
        parameterProcessor.showUsageInfoIfNeeded()
        
        let templateName = context.stringValue(.template)
        try parameterProcessor.loadTemplateParameters(templateName: templateName, context: context)
        parameterProcessor.setupShellParameters()
        try parameterProcessor.parseShellParameters(context: context)
        
        parameterProcessor.setupParametersBeforeAsking(context: context)
        
        parameterProcessor.askForMissingParameters(context: context)

        return context
    }

    /// Initialization of componentes with simple dependency injection
    func initializeComponents() {
        reviewer = Reviewer()
        generator = Generator(templates: templates, reviewer: reviewer)
    }
    
    /// Basic usage information
    func showUsageText() {
        print("codeTemplate - Generates a swift app components from templates")
        print("use argument `--help` for documentation\n")
    }
}

extension ScriptSetup {
    func generateCode(context: Context) throws {
        try context.setupProjectPaths()
        try generator.generateCode(context: context)
    }
}
